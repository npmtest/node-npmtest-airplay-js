{"/home/travis/build/npmtest/node-npmtest-airplay-js/test.js":"/* istanbul instrument in package npmtest_airplay_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-airplay-js/lib.npmtest_airplay_js.js":"/* istanbul instrument in package npmtest_airplay_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_airplay_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_airplay_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-airplay-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-airplay-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_airplay_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_airplay_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_airplay_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_airplay_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_airplay_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_airplay_js.__dirname + '/lib.npmtest_airplay_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-airplay-js/node_modules/airplay-js/airplay.js":"exports.Browser = require( './airplay/browser' ).Browser;\nexports.Device = require( './airplay/device' ).Device;\nexports.HLS = require( './airplay/hls' ).HLS;\n\n\n/**\n * create a HLS Server\n * \n * @param {Object=} options\n * @return {HLS} instance of HLS\n */\nexports.createHLS = function ( options ) {\n    return new exports.HLS( options );\n};\n\n/**\n * create a Browser\n * \n * @param {Object=} options\n * @return {Browser} instance of Browser\n */\nexports.createBrowser = function ( options ) {\n    return new exports.Browser( options );\n};\n\n/**\n * connect a airplay device\n * \n * @param {string} host airplay host\n * @param {number} port airplay port\n * @param {string=} pass pass\n * @param {Function=} callback callback function\n */\nexports.connect = function ( host, port, pass, callback ) {\n    throw 'not yet implemented';\n};","/home/travis/build/npmtest/node-npmtest-airplay-js/node_modules/airplay-js/airplay/browser.js":"/**\n * node-airplay\n *\n * @file bojour server\n * @author zfkun(zfkun@msn.com)\n * @thanks https://github.com/benvanik/node-airplay/blob/master/lib/airplay/browser.js\n */\n\nvar util = require( 'util' );\nvar events = require( 'events' );\n//var mdns = require( 'mdns' );\n\nvar mdns = require( 'mdns-js' );\n\nvar Device = require( './device' ).Device;\n\nvar Browser = function( options ) {\n    events.EventEmitter.call( this );\n    this.init( options );\n};\n\nutil.inherits( Browser, events.EventEmitter );\n\nexports.Browser = Browser;\n\n\n\n\nBrowser.prototype.init = function ( options ) {\n    var self = this;\n    var nextDeviceId = 0;\n\n    this.devices = {};\n    this.addresses = []\n\n    var browser = mdns.createBrowser(mdns.tcp('airplay'));\n\n    browser.on('ready', function () {\n        browser.discover();\n    });\n\n    browser.on('serviceUp', function(data) {\n        if(data.port && data.port == 7000 && self.addresses.indexOf(data.address) < 0){\n            var info = [data.address]\n            var name = data.name\n            self.addresses.push(data.address)\n            \n            device = new Device( nextDeviceId++, info , name );\n            device.on( 'ready', function( d ) {\n                self.emit( 'deviceOn', d );\n            });\n            device.on( 'close', function( d ) {\n                delete self.devices[ d.id ];\n                self.emit( 'deviceOff', d );\n            });\n\n            self.devices[ device.id ] = device;\n        }\n    });\n\n    browser.on('serviceDown', function(info) {\n      if ( !self.isValid( info ) ) {\n            return;\n        }\n\n        var device = self.getDevice( info );\n        if ( device ) {\n            device.close();\n        }\n    });\n};\n\nBrowser.prototype.start = function () {\n    this.emit( 'start' );\n    return this;\n};\n\nBrowser.prototype.stop = function() {\n    this.emit( 'stop' );\n    return this;\n};\n\nBrowser.prototype.isValid = function ( info ) {\n    if ( !info || !/^en\\d+$/.test( info.networkInterface ) ) {\n        return !1;\n    }\n    return !0;\n};\n\nBrowser.prototype.getDevice = function ( info ) {\n    for ( var deviceId in this.devices ) {\n        var device = this.devices[ deviceId ];\n        if ( device.match( info ) ) {\n            return device;\n        }\n    }\n};\n\nBrowser.prototype.getDeviceById = function ( deviceId, skipCheck ) {\n    var device = this.devices[ deviceId ];\n    if ( device && ( skipCheck || device.isReady() ) ) {\n        return device;\n    }\n};\n\nBrowser.prototype.getDevices = function ( skipCheck ) {\n    var devices = [];\n    for ( var deviceId in this.devices ) {\n        var device = this.devices[ deviceId ];\n        if ( skipCheck || device.isReady() ) {\n            devices.push( device );\n        }\n    }\n    return devices;\n};\n","/home/travis/build/npmtest/node-npmtest-airplay-js/node_modules/airplay-js/airplay/device.js":"/**\n * node-airplay\n *\n * @file airplay device\n * @author zfkun(zfkun@msn.com)\n * @thanks https://github.com/benvanik/node-airplay/blob/master/lib/airplay/device.js\n */\n\nvar events = require( 'events' );\nvar util = require( 'util' );\n\nvar Client = require( './client' ).Client;\n\nfunction Device ( id, info, name, callback ) {\n    var self = this;\n\n    events.EventEmitter.call( this );\n\n    this.id = id;\n    this.info = info;\n    this.name = name;\n    // this.serverInfo = null;\n    this.pingDelay = 5 * 1000; // 心跳间隔\n\n    this.client = new Client(\n        {\n            host: info[0], port: 7000\n            // ,user: 'zfkun', pass: ''\n        },\n        function () {\n            self.client.serverInfo(function( info ) {\n                self.serverInfo = info;\n                self.onReady( callback );\n            });\n        }\n    );\n    this.client.on( 'ping', function () { self.emit( 'ping' ); });\n\n    self.hls = require( '../airplay' ).createHLS();\n    self.hls.on( 'start', function () {\n        console.info( '[HLS] start: %s', self.hls.getURI() );\n    });\n    self.hls.on( 'stop', function () {\n        console.info( '[HLS] stop: %s', self.hls.getURI() );\n    });\n    self.hls.on( 'request', function ( req ) {\n        // var uri = url.parse( req.url, true );\n        console.info( '[HLS] request: %s', req.url );\n    });\n    self.hls.on( 'process', function ( d ) {\n        console.info( '[HLS] segment process: %s, %s, %s', d.index, d.file, d.out.toString() );\n    });\n    self.hls.on( 'segment', function ( d ) {\n        console.info( '[HLS] segment created: %s, %s, %s', d.index, d.file, d.out );\n    });\n    self.hls.on( 'open', function ( d ) {\n        console.info( '[HLS] opend: %s, %s', d.file, util.inspect( d.info ) );\n    });\n    self.hls.on( 'error', function ( err ) {\n        console.info( '[HLS] segment error: ', util.inspect( err ) );\n    });\n\n\n}\n\nutil.inherits( Device, events.EventEmitter );\nexports.Device = Device;\n\n\nDevice.prototype.onReady = function ( callback ) {\n    this.ready = !0;\n\n    if ( callback ) {\n        callback( this );\n    }\n\n    this.emit( 'ready', this );\n};\n\nDevice.prototype.isReady = function () {\n  return !!this.ready;\n};\n\nDevice.prototype.close = function() {\n    if ( this.client ) {\n        this.client.close();\n    }\n\n    this.client = null;\n    this.ready = !1;\n\n    this.emit( 'close', this );\n};\n\nDevice.prototype.match = function ( info ) {\n    for ( var key in info ) {\n        if ( this.info[ key ] != info[ key ] ) {\n            return !1;\n        }\n    }\n    return !0;\n};\n\nDevice.prototype.getInfo = function() {\n    var info = this.info;\n    var txtRecord = info.txtRecord || {};\n    var serverInfo = this.serverInfo;\n\n    return {\n        id: this.id,\n        name: info.name,\n        fullName: info.fullname,\n        deviceId: txtRecord.deviceid || serverInfo.deviceId,\n        features: serverInfo.features || txtRecord.features,\n        model: serverInfo.model,\n        interfaceName: info.networkInterface,\n        interfaceIndex: info.interfaceIndex,\n        addresses: info.addresses,\n\n        flags: txtRecord.flags,\n        pk: txtRecord.pk,\n\n        osVersion: serverInfo.osVersion,\n        protocolVersion: serverInfo.protocolVersion,\n        sourceVersion: serverInfo.sourceVersion || txtRecord.srcvers,\n        vv: serverInfo.vv || txtRecord.vv,\n\n        slideshowFeatures: [],\n        supportedContentTypes: []\n    };\n};\n\nDevice.prototype.play = function(media, position, callback){\n    var self = this\n\n    //#TODO: Check if has ffmpeg and if not, go directly to simpleplay\n    //\n    console.log(typeof(media))\n    self.hls.start( 7001 + this.id );\n\n    console.log(\"going to play: \"+media)\n    self.hls.open( media , function ( info ) {\n        device.simpleplay( self.hls.getURI(), '0.000000', function ( res ) {\n            console.info( '->> ', res );\n            setTimeout(function(){\n                device.status( function ( info ) {\n                    console.info( '->> ', info ? info : 'no info >(' );\n                    if ( info ) {\n                        console.log(info)\n                    }\n                });\n            }, 4000);\n        });\n    });\n    self.hls.on('NoFFMPEG', function(){\n        self.simpleplay(media, position, callback);\n        self.emit('NoFFMPEG')\n    })\n\n};\n\n\n// extend airplay apis: 'localName[:clientName]'\n[\n    'status:playbackInfo', 'authorize',\n    'simpleplay', 'stop', 'scrub', 'reverse', 'rate', 'volume',\n    'photo'\n].forEach(function ( api ) {\n    api = api.split( ':' );\n    api[1] = api[1] || api[0];\n\n    Device.prototype[ api[0] ] = function() {\n        this.client[ api[1] ].apply( this.client, arguments );\n    };\n});\n\n","/home/travis/build/npmtest/node-npmtest-airplay-js/node_modules/airplay-js/airplay/client.js":"/**\n * node-airplay\n *\n * @file airplay protocol client\n * @author zfkun(zfkun@msn.com)\n * @thanks https://github.com/benvanik/node-airplay/blob/master/lib/airplay/client.js\n */\n\nvar buffer = require( 'buffer' );\nvar events = require( 'events' );\nvar net = require( 'net' );\nvar util = require( 'util' );\nvar plist = require( 'plist-with-patches' );\n\nvar CLIENT_USERAGENT = 'MediaControl/1.0';\nvar CLIENT_PING_DELAY = 30; // 心跳间隔(s)\n\n\nvar Client = function ( options, callback ) {\n    events.EventEmitter.call( this );\n\n    var self = this;\n\n    // { port, host, localAddress, path, allowHalfOpen }\n    this.options = options;\n    this.responseQueue = [];\n\n    this.socket = net.createConnection( options, function() {\n        self.responseQueue.push( callback );\n        self.ping();\n    });\n\n    this.socket.on( 'data', function( data ) {\n        var res = self.parseResponse( data.toString() );\n        // util.puts( util.inspect( res ) );\n\n        var fn = self.responseQueue.shift();\n        if ( fn ) {\n            fn( res );\n        }\n    });\n\n    // TODO\n    this.socket.on( 'error', function ( err ) {\n        // FIXME: 这里会时不时的抛出异常: 'Uncaught, unspecified \"error\" event.'\n        try {\n            self.emit( 'error', { type: 'socket', res: err } );\n        } catch( e ) {\n            console.info( e.message );\n        }\n    });\n};\n\nutil.inherits( Client, events.EventEmitter );\nexports.Client = Client;\n\n\n// just for keep-alive\n// bug fix for '60s timeout'\nClient.prototype.ping = function ( force ) {\n    if ( !this.pingTimer || force === true ) {\n        clearTimeout( this.pingTimer );\n    }\n\n    if ( !this.pingHandler ) {\n        this.pingHandler = this.ping.bind( this );\n    }\n\n    this.socket.write(\n        [\n            'GET /playback-info HTTP/1.1',\n            'User-Agent: ' + CLIENT_USERAGENT,\n            'Content-Length: 0',\n            '\\n'\n        ].join( '\\n' )\n    );\n\n    this.emit( 'ping', !!force );\n\n    // next\n    this.pingTimer = setTimeout( this.pingHandler, CLIENT_PING_DELAY * 1000 );\n\n    return this;\n};\n\nClient.prototype.close = function() {\n    if ( this.socket ) {\n        this.socket.destroy();\n    }\n    this.socket = null;\n    return this;\n};\n\nClient.prototype.parseResponse = function( res ) {\n    // Look for HTTP response:\n    // HTTP/1.1 200 OK\n    // Some-Header: value\n    // Content-Length: 427\n    // \\n\n    // body (427 bytes)\n\n    var header = res;\n    var body = '';\n    var splitPoint = res.indexOf( '\\r\\n\\r\\n' );\n    if ( splitPoint != -1 ) {\n        header = res.substr(0, splitPoint);\n        body = res.substr(splitPoint + 4);\n    }\n\n    // Normalize header \\r\\n -> \\n\n    header = header.replace(/\\r\\n/g, '\\n');\n\n    // Peel off status\n    var status = header.substr( 0, header.indexOf( '\\n' ) );\n    var statusMatch = status.match( /HTTP\\/1.1 ([0-9]+) (.+)/ );\n    header = header.substr( status.length + 1 );\n\n    // Parse headers\n    var allHeaders = {};\n    var headerLines = header.split( '\\n' );\n    for ( var n = 0; n < headerLines.length; n++ ) {\n        var headerLine = headerLines[n];\n        var key = headerLine.substr( 0, headerLine.indexOf( ':' ) );\n        var value = headerLine.substr( key.length + 2 );\n        allHeaders[key] = value;\n    }\n\n    // Trim body?\n    return {\n        statusCode: parseInt( statusMatch[1], 10 ),\n        statusReason: statusMatch[2],\n        headers: allHeaders,\n        body: body\n    };\n\n};\n\nClient.prototype.request = function( req, body, callback ) {\n    if ( !this.socket ) {\n        util.puts('client not connected');\n        return;\n    }\n\n    req.headers = req.headers || {};\n    req.headers['User-Agent'] = CLIENT_USERAGENT;\n    req.headers['Content-Length'] = body ? buffer.Buffer.byteLength( body ) : 0;\n\n    // GET时不能启用Keep-Alive,会造成阻塞\n    if ( req.method === 'POST') {\n        // req.headers['Connection'] = 'keep-alive';\n    }\n\n\n    // 1. base\n    var text = req.method + ' ' + req.path + ' HTTP/1.1\\n';\n    // 2. header\n    for ( var key in req.headers ) {\n        text += key + ': ' + req.headers[key] + '\\n';\n    }\n    text += '\\n'; // 这个换行不能少~~\n    // 3. body\n    text += body || '';\n\n\n    this.responseQueue.push( callback );\n\n    this.socket.write( text );\n};\n\nClient.prototype.get = function( path, callback ) {\n    this.request( { method: 'GET', path: path }, null, callback );\n};\n\nClient.prototype.post = function( path, body, callback ) {\n    this.request( { method: 'POST', path: path }, body, callback );\n};\n\n\n\nClient.prototype.serverInfo = function ( callback ) {\n    this.get( '/server-info', function ( res ) {\n        var info = {};\n\n        var obj = plist.parseStringSync( res.body );\n        if ( obj ) {\n            info = {\n                deviceId: obj.deviceid,\n                features: obj.features,\n                model: obj.model,\n                osVersion: obj.osBuildVersion,\n                protocolVersion: obj.protovers,\n                sourceVersion: obj.srcvers,\n                vv: obj.vv\n            };\n        }\n        else {\n            this.emit( 'error', { type: 'serverInfo', res: res } );\n        }\n\n        if ( callback ) {\n            callback( info );\n        }\n    });\n};\nClient.prototype.playbackInfo = function ( callback ) {\n    this.get( '/playback-info', function ( res ) {\n        var info;\n\n        if ( res ) {\n            var obj = plist.parseStringSync( res.body );\n            if ( obj && Object.keys( obj ).length > 0 ) {\n                info = {\n                    duration: obj.duration,\n                    position: obj.position,\n                    rate: obj.rate,\n                    readyToPlay: obj.readyToPlay,\n                    readyToPlayMs: obj.readyToPlayMs,\n                    playbackBufferEmpty: obj.playbackBufferEmpty,\n                    playbackBufferFull: obj.playbackBufferFull,\n                    playbackLikelyToKeepUp: obj.playbackLikelyToKeepUp,\n                    loadedTimeRanges: obj.loadedTimeRanges,\n                    seekableTimeRanges: obj.seekableTimeRanges,\n\n                    uuid: obj.uuid,\n                    stallCount: obj.stallCount\n                };\n            }\n        }\n        else {\n            this.emit( 'error', { type: 'playbackInfo', res: res } );\n        }\n\n        if ( callback) {\n            callback( info );\n        }\n    });\n};\n\n// position: 0 ~ 1\nClient.prototype.simpleplay = function ( src, position, callback ) {\n    var body = [\n        'Content-Location: ' + src,\n        'Start-Position: ' + (position || 0)\n    ].join( '\\n' ) + '\\n';\n\n    this.post( '/play', body, function( res ) {\n        callback && callback( res );\n    });\n};\nClient.prototype.stop = function ( callback ) {\n    this.post( '/stop', null, function( res ) {\n        callback && callback( res );\n    });\n};\nClient.prototype.rate = function ( value, callback ) {\n    this.post( '/rate?value=' + value, null, function( res ) {\n        callback && callback( res );\n    });\n};\nClient.prototype.volume = function ( value, callback ) {\n    this.post( '/volume?value=' + value, null, function( res ) {\n        callback && callback( res );\n    });\n};\nClient.prototype.scrub = function ( position, callback ) {\n    this.post( '/scrub?position=' + position, null, function( res ) {\n        callback && callback( res );\n    });\n};\nClient.prototype.reverse = function ( callback ) {\n    this.post( '/reverse', null, function( res ) {\n        callback && callback( res );\n    });\n};\nClient.prototype.photo = function ( callback ) {\n    callback && callback();\n};\nClient.prototype.authorize = function ( callback ) {\n    callback && callback();\n};\nClient.prototype.slideshowFeatures = function ( callback ) {\n    callback && callback();\n};\n","/home/travis/build/npmtest/node-npmtest-airplay-js/node_modules/airplay-js/airplay/hls.js":"/**\n * node-airplay\n *\n * @file HTTP Live Streaming\n * @author zfkun(zfkun@msn.com)\n */\n\nvar fs = require( 'fs' );\nvar url = require( 'url' );\nvar path = require( 'path' );\nvar http = require( 'http' );\nvar util = require( 'util' );\nvar events = require( 'events' );\nvar spawn = require( 'child_process' ).spawn;\n\nvar IP_LOCAL = require( './ip' );\n\n\n\n\nfunction HLSServer( options ) {\n    events.EventEmitter.call( this );\n    var ops = this.options = options || {};\n\n    // 是否启用流模式(影响m3u8生成机制)\n    // ops.streaming = !!ops.streaming;\n    // TS文件缓存\n    ops.cache = !!ops.cache;\n    // TS分片时长(s)\n    ops.duration = ops.duration || 20;\n    // 编解码库目录\n    ops.lib = path.normalize( ops.lib || ( __dirname + '/../dep' ) ) + '/';\n    if ( !fs.existsSync( ops.lib ) ) {\n        ops.lib = '';\n    }\n    // TS分片输出目录\n    ops.out = path.normalize( ops.out || ( '/tmp' ) ) + '/';\n    if ( !fs.existsSync( ops.out ) ) {\n        fs.mkdirSync( ops.out );\n    }\n}\n\nutil.inherits( HLSServer, events.EventEmitter );\nexports.HLS = HLSServer;\n\n\n\n\nHLSServer.prototype.start = function ( port ) {\n    if ( !this.started ) {\n        this.started = !0;\n\n        this.baseURI = 'http://' + IP_LOCAL + ( port === 80 ? '' : ':' + port );\n\n        this.server = http.createServer( this.httpHandler.bind( this ) );\n        this.server.listen( port, IP_LOCAL );\n\n        this.emit( 'start', { host: IP_LOCAL, port: port } );\n    }\n\n    this.port = port\n    this.address = IP_LOCAL\n\n    return this;\n};\n\nHLSServer.prototype.stop = function() {\n    if ( this.started && this.server ) {\n        this.server.close();\n        this.emit( 'stop' );\n    }\n\n    this.started = !1;\n\n    return this;\n};\n\nHLSServer.prototype.getURI = function ( type, index ) {\n    if ( type === 'video' ) {\n        return '/stream/0.m3u8';\n    }\n    else if ( type === 'audio' ) {\n        return '/stream/1.m3u8';\n    }\n    else if ( type === 'iframes' ) {\n        return '/iframes.m3u8';\n    }\n    else if ( type === 'segment' ) {\n        return '/stream/0/' + index + '.ts';\n    }\n    else {\n        return this.baseURI;\n    }\n};\n\nHLSServer.prototype.setSubtitles = function( subtitles ){\n    console.log(\"Setting subtitles to: \"+subtitles)\n    var self = this\n    self.subtitles = subtitles\n}\n\nHLSServer.prototype.open = function ( fileFullPath, callback ) {\n    var self = this;\n    var media = fileFullPath\n\n    console.log(\"fileFullPath:\")\n    console.log(fileFullPath)\n    console.log(typeof(fileFullPath))\n    if (typeof(fileFullPath) != 'string'){\n        self.subtitles = media.subtitles\n        fileFullPath = media.file\n    }\n\n    if ( this.openThread ) {\n        this.openThread.kill();\n    }\n\n    this.file = fileFullPath;\n\n    var whichCommand = /^win/.test(process.platform) ? 'where' : 'which'\n\n    self.checkFirst = spawn(whichCommand,['ffprobe'])\n    self.checkFirst.on('close', function(data){\n        console.log(\"x:\"+data)\n        if(data!=0){\n            console.log(\"No FFMPEG FOUND :(\")\n            self.emit(\"NoFFMPEG\")\n            return 0;\n        }\n    })\n    self.checkFirst.stdout.on('data', function(data){\n        console.log(\"d:\"+data)\n\n        // # -------------------------------------------------- # //\n        // TODO: find the ffmpeg path when the object is constructed instead of resolving it now.\n        // PATCH to actually find the ffmpeg executable\n        var ffmpegPath = data.toString(\"utf8\").trim()\n        if(data.length > 0 && fs.existsSync(ffmpegPath)) {\n            var ffmpegPath = path.dirname(ffmpegPath) + path.sep\n            if(self.options.lib != ffmpegPath) {\n                self.options.lib = ffmpegPath\n                console.log(\"FFMPEG path set to \" + ffmpegPath)\n            }\n        } else {\n            self.emit(\"NoFFMPEG\")\n            return; // We assume that which will return != 0 so on('close') will handle the NoFFMPEG case.\n        }\n        // # -------------------------------------------------- # //\n\n        if(data.length >0){\n            self.openThread = spawn(\n                self.options.lib + 'ffprobe',\n                self.command4FFProbe( self.file ));\n            var output = '';\n            self.openThread.stdout.on( 'data', function ( chunk ) {\n                output += chunk;\n            });\n            self.openThread.stderr.on( 'data', function ( err ) {\n                self.emit(\n                    'error',\n                    { type: 'open', err: err, file: fileFullPath }\n                );\n            });\n            self.openThread.stdout.on( 'end', function () {\n                var json;\n                try {\n                    json = JSON.parse( output );\n                } catch (e) {\n                    self.emit(\n                        'error',\n                        { type: 'open', err: e.message, file: fileFullPath }\n                    );\n                }\n                if ( json ) {\n                    self.videoInfo = json;\n                    // update store\n                    self.segmentSize = Math.ceil( parseFloat( json.format.duration, 10 ) / self.options.duration );\n                    self.emit( 'open', { file: fileFullPath, info: json } );\n                }\n                if ( callback ) {\n                    callback( json );\n                }\n                self.openThread = null;\n            });\n            return self;\n        }\n    })\n};\n\n\nHLSServer.prototype.segment = function ( index, req, res ) {\n    var self = this;\n    var outfile = this.options.out + index + '.ts';\n\n    // skip if exists\n    if ( fs.existsSync( outfile ) && false) {\n        fs.createReadStream( outfile ).pipe( res );\n        return;\n    }\n\n    var f = spawn(\n        this.options.lib + 'ffmpeg',\n        this.command4FFMpeg( index, outfile )\n    );\n\n    var output = '';\n    f.stdout.on( 'data', function ( chunk ) {\n        output += chunk;\n        self.emit( 'process', { index: index, file: outfile, out: chunk } );\n    });\n    f.stdout.on( 'error', function ( err ) {\n        self.emit(\n            'error',\n            { type: 'segment', err: err, index: index, file: outfile }\n        );\n    });\n\n    f.stdout.on( 'end', function () {\n        self.emit( 'segment', { index: index, file: outfile, out: output } );\n        fs.createReadStream( outfile ).pipe( res );\n    });\n\n};\n\nHLSServer.prototype.command4FFProbe = function ( filePath ) {\n    var opt = [\n        '-v',\n        'quiet',\n        '-print_format', 'json',\n        '-show_format',\n        '-show_streams',\n        filePath\n    ];\n\n    return opt;\n};\n\nHLSServer.prototype.command4FFMpeg = function ( tsIndex, tsOutput ) {\n    var opt = [\n        '-y',\n        '-i',\n        this.file,\n        '-t', this.options.duration,\n        '-ss', this.options.duration * (tsIndex - 1),\n    ];\n\n    var isH264 = this.videoInfo.streams.some(function ( s ) {\n        return s.codec_name === 'h264';\n    });\n\n    // h264 && aac\n    if ( isH264 ) {\n        opt = opt.concat([\n            '-c:v', 'libx264', // libx264 || copy\n            '-c:a', 'aac', // aac || copy\n            '-strict', '-2',\n            '-vbsf', 'h264_mp4toannexb'\n        ]);\n    }\n    else {\n        opt = opt.concat([\n            '-c:v', 'linx264',\n            '-c:a', 'aac',\n            // '-g', 100,\n            // '-vcodec', 'copy',\n            // '-acodec', 'copy',\n            '-b', '500k',\n            '-ac', '2',\n            '-ar', '44100',\n            '-ab', '32k'\n        ]);\n    }\n\n    // TODO: HLS by ffmpeg\n    // opt = opt.concat([\n    //     '-f', 'hls',\n    //     '-hls_time', '10',\n    //     '-hls_list_size', '999',\n    //     'out/0.m3u8'\n    // ]);\n\n    opt.push( tsOutput );\n\n    return opt;\n};\n\nHLSServer.prototype.httpHandler = function ( request, response ) {\n    var ops = this.options;\n    var header = {};\n    var body = [];\n    var uri = url.parse( request.url, true );\n    var self = this\n\n    this.emit( 'request', request );\n\n    if ( uri.pathname === '/' ) {\n        console.log(\"attending /\")\n        body.push( '#EXTM3U' );\n        body.push( '#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"audio\",LANGUAGE=\"und\",NAME=\"Original Audio\",DEFAULT=YES,AUTOSELECT=YES' );\n        console.log(this.subtitles)\n        if(this.subtitles){\n            this.subtitles.forEach(function(each){\n                body.push( '#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID=\"subs\",NAME=\"English\",DEFAULT=YES,AUTOSELECT=YES,FORCED=NO,LANGUAGE=\"en\",URI=\"http://'+self.address+':'+self.port+'/subtitles/'+each.language+'.m3u8\"' )\n            })\n        }\n        //body.push( '#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID=\"subs\",NAME=\"Spanish\",DEFAULT=NO,AUTOSELECT=NO,FORCED=YES,LANGUAGE=\"en\",URI=\"http://carlosguerrero.com/b.m3u8\"' )\n\n        // stream#0\n        if(this.subtitles){\n            body.push( '#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=20000000,CODECS=\"mp4a.40.2,avc1.640028\",AUDIO=\"audio\",SUBTITLES=\"subs\"' );\n        }else{\n            body.push( '#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=20000000,CODECS=\"mp4a.40.2,avc1.640028\",AUDIO=\"audio\"' );\n        }\n        body.push( this.getURI( 'video' ) );\n\n        // // stream#1\n        // body.push( '#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=20000000,CODECS=\"ac-3,avc1.640028\",AUDIO=\"audio\"' );\n        // body.push( '/stream/1.m3u8' );\n\n        // // frames\n        // body.push( '#EXT-X-I-FRAME-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=20000000,CODECS=\"avc1.640028\",URI=\"/iframes.m3u8\"' );\n\n        body.push( '#EXT-X-ENDLIST' );\n        body = body.join( '\\n' );\n\n        // header['Content-Type'] = 'application/vnd.apple.mpegurl';\n        header[ 'Content-Length' ] = body.length;\n\n        response.writeHead( 200, header );\n        response.write( body );\n\n        response.end();\n    }\n    else if ( uri.pathname === this.getURI( 'video' ) ) {\n        var tsDuration = ops.duration;\n        var videoDuration = parseFloat( this.videoInfo.format.duration, 10 );\n\n        body.push( '#EXTM3U' );\n        body.push( '#EXT-X-VERSION:3' );\n        // body.push( '#EXT-X-PLAYLIST-TYPE:EVENT' );\n        body.push( '#EXT-X-MEDIA-SEQUENCE:0' );\n        body.push( '#EXT-X-TARGETDURATION:' + tsDuration );\n        body.push( '#EXT-X-PLAYLIST-TYPE:VOD' );\n        body.push( '#EXT-X-ALLOW-CACHE:' + ( ops.cache ? 'YES' : 'NO') );\n\n        for ( var i = 1, n = this.segmentSize; i < n; i++ ) {\n            body.push(\n                '#EXTINF:'\n                // 最后一个分段一般会少一点，需要精确计算下\n                + ( i >= n ? ( videoDuration % tsDuration || tsDuration ) : tsDuration )\n                + ','\n            );\n            body.push( this.getURI( 'segment', i ) );\n        }\n\n        body.push( '#EXT-X-ENDLIST' );\n        body = body.join( '\\n' );\n\n        // header['Connection'] = 'Keep-Alive';\n        // header['Content-Type'] = 'application/vnd.apple.mpegurl';\n        header['Content-Length'] = body.length;\n\n        response.writeHead( 200, header );\n        response.write( body );\n        response.end();\n    }\n    // else if ( uri.pathname === this.getURI( 'audio' ) ) {\n    // }\n    // else if ( uri.pathname === this.getURI( 'iframes' ) ) {\n    //     body.push( '#EXTM3U' );\n    //     body.push( '#EXT-X-VERSION:4' );\n    //     body.push( '#EXT-X-TARGETDURATION:3' );\n    //     body.push( '#EXT-X-I-FRAMES-ONLY' );\n    //     body.push( '#EXT-X-PLAYLIST-TYPE:VOD' );\n    //     body.push( '#EXT-X-ALLOW-CACHE:YES' );\n    //     body.push( '#EXT-X-MEDIA-SEQUENCE:0' );\n\n    //     body.push( '#EXTINF:3.000000000000000,' );\n    //     body.push( '#EXT-X-BYTERANGE:2097152@564' );\n\n    //     body.push( '/iframes/0.ts' );\n    //     body.push( '#EXTINF:3.000000000000000,' );\n    //     body.push( '#EXT-X-BYTERANGE:2097152@564' );\n    //     body.push( '/iframes/1.ts' );\n    //     ...\n\n    //     body.push( '#EXT-X-ENDLIST' );\n    // }\n    else if ( /^\\/stream\\/0\\//.test( uri.pathname ) ) {\n        header['Content-Type'] = 'video/MP2T';\n        response.writeHead( 200, header );\n\n        var tsIndex = parseInt( path.basename( uri.pathname, '.ts' ), 10 );\n        this.segment( tsIndex, request, response );\n        this.emit( 'stream', tsIndex, this.segmentSize );\n        // fs.createReadStream( filePath ).pipe( response );\n        // response.write( fs.readFileSync( filePath ) );\n        // response.end();\n    } else if ( /^\\/subtitles/.test(uri.pathname) ){\n\n        var selected = uri.pathname.substring(11,uri.pathname.length)\n\n        body = []\n        response.write('#EXTM3U\\n')\n        response.write('#EXT-X-TARGETDURATION:30\\n')\n        response.write('#EXT-X-VERSION:3\\n')\n        response.write('#EXT-X-MEDIA-SEQUENCE:1\\n')\n        response.write('#EXT-X-PLAYLIST-TYPE:VOD\\n')\n\n        this.subtitles.forEach(function(each){\n            console.log(each)\n            if( selected.indexOf(each.language)>-1 ){\n                response.write('#EXTINF:30.0,\\n')\n                response.write(each.url+'\\n')\n            }\n        });\n        response.write('#EXT-X-ENDLIST\\n')\n\n        body = \"\"\n        response.end();\n    } else {\n        response.writeHead( 404 );\n        response.end();\n    }\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-airplay-js/node_modules/airplay-js/airplay/ip.js":"/**\n * 获取本机IP\n * 默认取127.0.0.1之外的第一个IP地址\n * \n * @return {string}\n */\nmodule.exports = (function() {\n    var ifaces = require( 'os' ).networkInterfaces();\n    var defultAddress = '127.0.0.1';\n    var ip = defultAddress;\n\n    for ( var dev in ifaces ) {\n        ifaces[ dev ].forEach(\n            function( details ) {\n                if (ip === defultAddress && details.family === 'IPv4') {\n                    ip = details.address;\n                }\n            }\n        );\n    }\n\n    return ip;\n})();"}